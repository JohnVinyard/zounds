TOOO:
-------------
2) come back and finish framecontroller API intro with examples of
	- acquiring data
	- getting frames from the db
	- listing all ids
	- getting feature stats

- Get local jQuery copy

- deployment script



Use :type: and :rtype: directives, as described here: http://sphinx.pocoo.org/domains.html#info-field-lists

TODO: API documentation
	
	DONE zounds.acquire	
	zounds.data
		zounds.data.frame
	framesearch
	zounds.nputil
		*
	
-Make a note in analyze module documentation about the convention of only
 documenting Extractor.__init__ args that need to be passed to Feature.__init__


- try audio settings suggested here: http://jaket.is-a-geek.com/blog/linux/glitchy-audio-on-puredyne-in-a-virtual-machine

- Make a note about audio settings for a VM (if they work)

- Make a note in installation docs about answering "yes" to the JACK installation
  question
  
- Add readme file with attributions to the pre-selected sounds

- Test the quickstart features using a composite of (loudness,centroid,flatness)
  for the exhaustive search. Use the --normalize cmd line option, and link to
  the ExhaustiveSearch documentation
 
- Do the last part of the quickstart tutorial as an interactive session

- Update build instructions and quickstart tutorial
	- make a note about logging out and logging in again after running setup.py

- cplay.o permissions error?

TODO: Do another installation test run and move up a new dist package

Fix tile normalization problem

- Bookmark searches

- Button to reload page

- Freesound attribution

- Limit search sizes

- Limit size of image and audio requests

- Upload new tarball of .02 to BitBcket

- Move bugs and feature "requests" into bitbucket issue tracker

- start a planning document for the higher level/ more abstract stuff


After job-hunt
========================================================================
- BUG: totally unhelpful error message when calling aggregate function on
  an unstored feature, e.g. FrameModel.fft.std()
 

  
- Store variable length data

- Don't store redundant data for features with a step size greater than 1

- It's kinda clunky that frames storage and other storage backends are configured
  in two seperate ways. Is there a good reason for this? Why can't all of them
  be treated equally? 

- zounds.learn.nnet.autoencoder has a *lot* of cruft. Do some cleanup and 
  "modernization"

- TODO: KMeansStoppingCondition class, which has n_iterations and threshold
attributes to pass along to scipy.cluster.vq.kmeans

BUG: For MeanStd-type preprocessors, if the axis arg = 1 (meaning normalization
should happen example-wise) the value should never be "remembered", since there
will be a different number of examples each time, and the stats computed from
one set of data won't be applicable to the next.

- How can docstrings be inherited?

- How do I put brackets around optional arguments in the documentation using
.. autoclass::?

- Documentation punt on the p.train() call about stopping condition in the 
 zounds.learn module documentation


- Good, efficient, cached and computed-on-demand stats implementations for
 both PyTables and FileSystem that are robust to very large data stores.


- FrameModel.extract() method, to get a Frames instance directly, without
  appending it to the database. Also, FrameModel.append(), and FrameModel.nframes().

- FrameModel.append() method, which does the same thing as FrameController.append()


- BarkBands have artifacts when nbands > 150

- PrecomputedPatch limits itself to the same number of samples as PrecomputedFeature,
  even if there might be an opportunity to gather many more samples.

- zounds.learn.fetch.Patch should implement the __iter__ method, so it can
  be used interchangeably with an NDPatch with one Patch argument
 

Why is search slower?  I think it's the fetching of the frames,FileSystem-style
	- Hint, I'm not seeing the longer times in search.py, only websearch
	- Hint 2- it's about reading from the file!

- How do I know when the jack server is ready? (get rid of sleep() call)

- How do I shut things down so that JACK doesn't complain about xruns, etc...

- JACK player doesn't do any resampling. If Environment.samplerate and
  JACK's samplerate disagree, all buffers must be resampled
 
- For __str__ and __repr__ methods, nice printing for dictionaries 
  (maybe using pprint.format)?

- FileSystemFrameController.stat implementation sucks (see TODO notes)

- KMeans++ implementation

Anyplace where I'm using len(a.shape), I should be using ndim

PyTables.stat() array is too big bug.

PrecomputedPatch tests

TODO: extractors using multiprocessing hang when updating database 
	(Is this the case with FileSystemFrameController?) - Use PoolX in Template.py
	and see if the problem persists

- Get rid of binary incompatibility warning from pyx files

- tests for all extractors

- TODO: Pooled doesn't do chunk-based processing

- BUG: Pooled doesn't work for nested Pooled features

- Is it possible to cache the extractor chain so it doesn't have to be rebuilt for
  each new incoming pattern. Will this require a flush() or reset() method?

- BUG: It's possible to add duplicates to the database because of external_id
	truncation

TODO: "TODO" and "KLUDGE" sweep for low-hanging fruit

Finish Constant-Q implementation

- TODO: Pass an id or a (source,external_id) argument to search.py as the query 

- TODO: Tile method should work with any extractor, not just a Pipeline 

- TODO: Visualize Exhaustive search results (features and distances)

- TODO: Ensure that quickstart/ab.py works with a few different algorithms

- Configurable setup.py depending on choice of backing store

- In websearch, templates shouldn't live in the same directory as js and css.
  This makes it accessible to the outside world
 
- More descriptive error when you try to use a search implementation for which
  no back-end is configured in config.py
  
- Add psychoacoustics module.  Add mel scale and refactor some code in analyze.bark

- mmap "cannot allocate memory error"? when doing update with FileSystemFrameController?

- zounds.pattern pyxbld file builds cplay.c and cplay.h in a non-cross-platform way

- play.pyx uses uint64 type instead of jack_time_t. How do I use the proper type?

- 2d fft performance (as compared to TemplateMatch)?

- Try RBM and autoencoder for learning patch centroids, instead of KMeans

PrecomputedFeature with filter (e.g. sum() > n) tests

- Why is FrameModel.extractor_chain() so slow?

- Multiscale kmeans, i.e., do TemplateMatch on multiple scales

- Expectation-Maximization clustering

- Precomputed Feature and PrecomputedPatch are slow, because they read the entire
 frame instance into memory before sampling

TODO: The idea behind some of the FrameController.Address methods is
	seriously broken
	
- BUG : Address equivalence bug: [1,4,10] and [1,6,10] are considered equivalent.  This
  is incorrect
 
- Figure out how to deal with two failing tests.

- Allow features to "expand", so that an extractor with nframes = 60 and step = 60
  can be written to the database like a feature with nframes = stepsize = 1.
  E.g., sharpening a spectrogram in 2d would require this.
  
- Fetch class to gather samples from non-stored features

- Write LearnedFeature tests

- mp3 -> wav conversion by acquirers

- Configurable encoder and decoder for the "audio" feature, making it possible
	to store mp3, ogg vorbis, or some other audio-encoding, instead of just
	raw audio.  It'd be great if I could store lots of useful features AND
	compress the data. It'd be even better if the encoding and the root feature
	were the same thing!

- Automatically parallelize independent branches of an extractor tree

- FEATURE : Automatic rebuilding of search indices after data is added

- Is storing features in row major order the best way?

TODO:  Try lowpass filter subtraction method for spectrogram sharpening

Finish Scattering implementation

- Bug: It's possible to load controllers of the wrong type with 
	PickledController-derived classes

- Try parallel exhaustive search with FileSystemFrameController