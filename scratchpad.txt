TOOO:
-------------
- BUG: ingest doesn't exclude sounds already in the db

- TODO: Plot 3d movies

- TODO: Stats for stored features

- TODO: Try concatenating different sum axes in scatter app

- TODO: Refactor FFT code

- TODO: Write tests for refactored FFT code

- TODO: Visualize Exhaustive search results (features and distances)

- TODO: Ensure that ab works with a few different algorithms

- BUG: Step sizes of > 1 seem to screw up parallelized ExhaustiveSearch

-TODO: Compare results from serial and parallel ExhaustiveSearch implementations,
		ensuring they're identical

- TODO: Try BarkBands with narrower range in Hz, maybe 50hz - 12khz

- BUG: It's possible to add duplicates to the database because of external_id
	truncation

- BUG: Tests are being run multiple times when imported by other tests

- BUG: Features with a step size > 1 get zeroed at buffer boundaries by PyTablesFramesController

- Profile ingest.py. How can this be faster?

- Reread (and understand) 'Encoding Sound Timbre in the Auditory System'

- Reread (and understand) 'Multiscale scattering for audio classification'

- Bug: It's possible to load controllers of the wrong type with 
	PickledController-derived classes
	
- FEATURE : Automatic rebuilding of search indices after data is added

- BUG: Something about the PyTables lock gets screwed up when writing large amounts
  of data

- Add mel scale and refactor some code in analyze.bark

- BUG : Address equivalence bug: [1,4,10] and [1,6,10] are considered equivalent.  This
  is incorrect

- Write LearnedFeature tests

- Patterns

- Sphinx documentation

- multi-process sync - Deferred until I can figure out celery chord bug

- Add celery to list of dependencies once I've settled on using it

- mp3 -> wav conversion by acquirers

- Configurable encoder and decoder for the "audio" feature, making it possible
	to store mp3, ogg vorbis, or some other audio-encoding, instead of just
	raw audio.  It'd be great if I could store lots of useful features AND
	compress the data
	



