TOOO:
-------------

- can't find numpy headers when building (both nputil and pattern need a pyxbld file that points to numpy header location)

 - Make a note in the documentation about ALSA audio

- Try writing a simple, realtime JACK-based audio player (check out Alex McLean's SmoothDirt repo)

- Add jack to list of dependencies

- Switch Environment.play method to use new jack-based audio player

==============================================================================

- mmap "cannot allocate memory error"? when doing update?

- Optional arg to zounds quickstart to use PyTablesFrameController or FileSystemFrameController

TODO: Two modes for ExhaustiveSearch

TODO: Ensure that all quickstart scripts use argparse. (Use nargs='?' for single arg scripts)

TODO: README file for setuptools

TODO: Do another installation test run and move up a new dist package

TODO: API documentation

- FileSystemFrameController.stat implementation sucks (see TODO notes)

- KMeans++ implementation

TEST : Cut down on search time by *excluding* ignored codes from the index

Anyplace where I'm using len(a.shape), I should be using ndim

Quickstart - ensure that websearch is copied and setup correctly

command-line args for websearch.py to configure search class, etc.

PyTables.stat() array is too big bug.

PrecomputedPatch tests

TODO: extractors using multiprocessing hang when updating database 
	(Is this the case with FileSystemFrameController?) - Use PoolX in Template.py
	and see if the problem persists

- Get rid of binary incompatibility warning from nputil.countbits.pyx

- tests for all extractors

- TODO: Pooled doesn't do chunk-based processing

- BUG: Pooled doesn't work for nested Pooled features

- Is it possible to cache the extractor chain so it doesn't have to be rebuilt for
  each new incoming pattern. Will this require a flush() or reset() method?

- BUG: It's possible to add duplicates to the database because of external_id
	truncation

TODO: "TODO" and "KLUDGE" sweep for low-hanging fruit

Finish Constant-Q implementation

- TODO: Nice printing for Extractor, FrameModel, Preprocess, Learn, Environment, etc...

- TODO: Pass an id or a (source,external_id) argument to search.py as the query 

- TODO: Tile method should work with any extractor, not just a Pipeline 

- TODO: Visualize Exhaustive search results (features and distances)

- TODO: Ensure that quickstart/ab.py works with a few different algorithms

- Bug: It's possible to load controllers of the wrong type with 
	PickledController-derived classes
	
- Add psychoacoustics module.  Add mel scale and refactor some code in analyze.bark



After job-hunt
========================================================================
- zounds.pattern pyxbld file builds cplay.c and cplay.h in a non-cross-platform way

- play.pyx uses uint64 type instead of jack_time_t. How do I use the proper type?

- 2d fft performance (as compared to TemplateMatch)?

- Try RBM and autoencoder for learning patch centroids, instead of KMeans

PrecomputedFeature with filter (e.g. sum() > n) tests

- RBM/Autoencoder-based audio encoding?

- Why is FrameModel.extractor_chain() so slow?

- Multiscale kmeans, i.e., do TemplateMatch on multiple scales

- Expectation-Maximization clustering

- Precomputed Feature and PrecomputedPatch are slow, because they read the entire
 frame instance into memory before sampling

TODO: The idea behind some of the PyTablesFrameController.Address methods is
	seriously broken
	
- BUG : Address equivalence bug: [1,4,10] and [1,6,10] are considered equivalent.  This
  is incorrect
 
- Figure out how to deal with two failing tests.

- Allow features to "expand", so that an extractor with nframes = 60 and step = 60
  can be written to the database like a feature with nframes = stepsize = 1.
  E.g., sharpening a spectrogram in 2d would require this.
  
- Fetch class to gather samples from non-stored features

- Write LearnedFeature tests

- mp3 -> wav conversion by acquirers

- Configurable encoder and decoder for the "audio" feature, making it possible
	to store mp3, ogg vorbis, or some other audio-encoding, instead of just
	raw audio.  It'd be great if I could store lots of useful features AND
	compress the data. It'd be even better if the encoding and the root feature
	were the same thing!

- Automatically parallelize independent branches of an extractor tree

- FEATURE : Automatic rebuilding of search indices after data is added

- Is storing features in row major order the best way?

TODO:  Try lowpass filter subtraction method for spectrogram sharpening

Finish Scattering implementation

- Configurable setup.py depending on choice of backing store