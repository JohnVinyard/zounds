TOOO:
-------------
- Way to configure number of cores for multiprocessing stuff

- FloatDivision error when ingest is used and all files have been processed

- FileSystemFrameController.stat implementation sucks (see TODO notes)

- Try RBM and autoencoder for learning clusters

 - bug with 9228
 
- Blog entry explaining sliding_window method

- KMeans++ implementation

TEST : Cut down on search time by *excluding* ignored codes from the index

Anyplace where I'm using len(a.shape), I should be using ndim

2d fft performance?

- Try writing a simple, realtime JACK-based audio player (check out Alex McLean's SmoothDirt repo)

Quickstart - ensure that websearch is copied and setup correctly

command-line args for websearch.py

PyTables.stat() array is too big bug.

PrecomputedPatch tests

TODO: extractors using multiprocessing hang when updating database 
	(Is this the case with FileSystemFrameController?)

- Get rid of binary incompatibility warning

- tests for all extractors

- Configurable setup.py depending on choice of backing store

- Add a note in the docs about the source distribution being the preferred route

- Add a small collection of soundfiles downloadable from the doc site

- If you're on Ubuntu, you can use the command `xdg-open <html-file>` to open a local file or URL using the default browser.

- Make a note in the documentation about ALSA audio

- TODO: Pooled doesn't do chunk-based processing

- BUG: Pooled doesn't work for nested Pooled features

- Is it possible to cache the extractor chain so it doesn't have to be rebuilt for
  each new incoming pattern. Will this require a flush() or reset() method?

- BUG: It's possible to add duplicates to the database because of external_id
	truncation

TODO: Two modes for ExhaustiveSearch

TODO: Do another installation test run and move up a new dist package

TODO: API documentation

TODO: Use the python logging module

TODO: Ensure that all quickstart scripts use argparse. (Use nargs='?' for single arg scripts)

TODO: README file for setuptools

TODO: "TODO" and "KLUDGE" sweep for low-hanging fruit

Finish Constant-Q implementation

- TODO: Nice printing for Extractor, FrameModel, Preprocess, Learn, Environment, etc...

- TODO: Pass an id or a (source,external_id) argument to search.py as the query 

- TODO: Tile method should work with any extractor, not just a Pipeline 

- TODO: Visualize Exhaustive search results (features and distances)

- TODO: Ensure that quickstart/ab.py works with a few different algorithms

- Bug: It's possible to load controllers of the wrong type with 
	PickledController-derived classes
	
- Add psychoacoustics module.  Add mel scale and refactor some code in analyze.bark



After job-hunt
========================================================================
PrecomputedFeature with filter (e.g. sum() > n) tests

- RBM/Autoencoder-based audio encoding?

- Why is FrameModel.extractor_chain() so slow?

- Multiscale kmeans

- Expectation-Maximization clustering

- Precomputed Feature and PrecomputedPatch are slow, because they read the entire
 frame instance into memory before sampling

TODO: The idea behind some of the PyTablesFrameController.Address methods is
	seriously broken
	
- BUG : Address equivalence bug: [1,4,10] and [1,6,10] are considered equivalent.  This
  is incorrect
 
- Figure out how to deal with two failing tests.

- Allow features to "expand", so that an extractor with nframes = 60 and step = 60
  can be written to the database like a feature with nframes = stepsize = 1.
  E.g., sharpening a spectrogram in 2d would require this.
  
- Fetch class to gather samples from non-stored features

- FileSystemFrameController index locking mechanism is broken. Also, I believe
  that proceses are spending more time waiting to read/write than they are 
  actually extracting features

- Write LearnedFeature tests

- mp3 -> wav conversion by acquirers

- Configurable encoder and decoder for the "audio" feature, making it possible
	to store mp3, ogg vorbis, or some other audio-encoding, instead of just
	raw audio.  It'd be great if I could store lots of useful features AND
	compress the data. It'd be even better if the encoding and the root feature
	were the same thing!

- Automatically parallelize independent branches of an extractor tree

- FEATURE : Automatic rebuilding of search indices after data is added

- Is storing features in row major order the best way?

TODO:  Try lowpass filter subtraction method for spectrogram sharpening

Finish Scattering implementation