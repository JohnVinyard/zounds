
class Preprocess(object):
    '''
    Base class for data preprocessors.  These will usually process a large
    batch of data that will be fed to a learning algorithm. They will remember
    any necessary state (see MeanStd below, e.g.), so that they can be applied
    to future data in exactly the same way once the learning algorithm is 
    trained.
    '''    
    def __init__(self):
        object.__init__(self)
    
    def _preprocess(self,data):
        raise NotImplemented()
    
    def __call__(self,data):
        return self._preprocess(data)

# TODO: Write tests
class NoOp(Preprocess):
    '''
    A preprocessor that does nothing
    '''
    
    def __init__(self):
        Preprocess.__init__(self)
         
    def _preprocess(self,data):
        return data

# TODO: Write tests
class MeanStd(Preprocess):
    '''
    A common preprocessing step before feeding data to many learning algorithms.
    '''
    
    def __init__(self,mean = None, std = None, axis = 0):
        Preprocess.__init__(self)
        self.mean = mean
        self.std = std
        self.axis = axis
     
    def _preprocess(self,data):
        if self.mean is None:
            self.mean = data.mean(self.axis)
            
        newdata = data - self.mean
        
        if self.std is None:
            self.std = newdata.std(self.axis)
            
        newdata /= self.std
        
        return newdata
        
        

    
    
