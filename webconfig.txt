Deployment
===============================================================================
server name will be zoundssearch
files will be in /home/john/zoundssearch


1. get source distribution
1. unpack source distribution
1. give dependencies.sh execute permissions
1. run dependencies.sh
1. sudo pip install numpy
1. sudo pip install scipy
1. run setup.py until "import zounds" works, (or it exits without an error?)
1. run the tests
1. copy up datastore, if it doesn't already exist
1. copy up pipeline,search,freesound api key, config.py

1. move websearch.py from source dist folder into www folder
1. move quickstart/static from source dist to www folder
1. make log directory in zoundssearch

1. pip install uwsgi
1. sudo apt-get install libpcre3-dev
1. get the latest nginx source and build it, if nginx isn't installed
1. edit nginx config file
1. ensure that httplib2,poster,simplejson, and freesound packages are installed
1. ensure that /tmp/webpy.sock is readable and writable
1. ensure that nginx executable has execute permissions
1. get supervisor
1. edit the supervisor config file to include nginx and uwsgi command lines
1. start supervisorord




===============================================================================
This document details the steps I've taken so far to get a working nginx + uwsgi
server configured.


1. pip install uwsgi in the zounds2 virtualenv
2. get the latest nginx source (1.2.6), build it, and install in the zounds2 virtualenv
3. Use the following as the nginx configuration

	user www-data;
worker_processes  1;

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
    # multi_accept on;
}

http {
    include       /usr/local/nginx/conf/mime.types;

    access_log	/var/log/nginx/access.log;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    tcp_nodelay        on;

    gzip  on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;

	server {
		listen       localhost:80;
		server_name  localhost;

		location /static {
			alias /home/john/zoundsapps/filesystem/static;
		}

		location /media {
			alias /home/john/zoundsapps/filesystem/media;
			expires 30d;
    		add_header Pragma public;
		    add_header Cache-Control "public";
		}

		location / {
			include uwsgi_params;
			uwsgi_pass unix:/tmp/webpy.sock;
		}
	}

	server {
		listen       192.168.1.103:80;
		server_name  192.168.1.103;

		location /static {
			alias /home/john/zoundsapps/filesystem/static;
		}

		location /media {
			alias /home/john/zoundsapps/filesystem/media;
			expires 30d;
    		add_header Pragma public;
		    add_header Cache-Control "public";
		}

		location / {
			include uwsgi_params;
			uwsgi_pass unix:/tmp/webpy.sock;
		}
	}
}

# mail {
#     # See sample authentication script at:
#     # http://wiki.nginx.org/NginxImapAuthenticateWithApachePhpScript
# 
#     # auth_http localhost/auth.php;
#     # pop3_capabilities "TOP" "USER";
#     # imap_capabilities "IMAP4rev1" "UIDPLUS";
# 
#     server {
#         listen     localhost:110;
#         protocol   pop3;
#         proxy      on;
#     }
# 
#     server {
#         listen     localhost:143;
#         protocol   imap;
#         proxy      on;
#     }
# }


4. Start uwsgi with the following options (I need to figure out all the pythonpath shit)

	 /home/john/.virtualenvs/zounds2/bin/uwsgi -p 4 -s /tmp/webpy.sock --pythonpath /home/john/.virtualenvs/zounds2/  --pythonpath /home/john/.virtualenvs/zounds2/lib/python2.6/site-packages/ --master --module websearch --enable-threads --pyargv "--feature packed --searchclass ExhaustiveLshSearch --sounddir /home/john/Test2 --nresults 75"
	
5. Ensure that /tmp/webpy.sock is readable and writable by the nginx and uwsgi processes. 

6. ensure that httplib2,poster,simplejson, and freesound packages are installed

7. install supervisor

